{"version":3,"file":"react-style-tag.js","sources":["../src/blob.ts","../src/options.ts","../src/styles.ts","../src/Style.tsx","../src/hash.ts"],"sourcesContent":["const noop = function noopCreateObjectUrl(): undefined {\n  return;\n} as unknown as typeof URL.createObjectURL;\n\n/**\n * Create a cached version of the getLinkHref.\n */\nexport function createGetCachedLinkHref(): (\n  style: string\n) => string | undefined {\n  let href: string | undefined;\n  let createObjectURL: ReturnType<typeof getCreateObjectURL> =\n    getCreateObjectURL();\n  let currentStyle: string | null = null;\n\n  return function getCachedLinkedHref(style: string): string | undefined {\n    if (style === currentStyle) {\n      return href;\n    }\n\n    if (createObjectURL === noop) {\n      createObjectURL = getCreateObjectURL();\n    }\n\n    if ((currentStyle = style)) {\n      return (href = createObjectURL(new Blob([style], { type: 'text/css' })));\n    }\n\n    return (href = undefined);\n  };\n}\n/**\n * Create the url string based on the available URL. If window is unavailable (such as in SSR),\n * then bail out.\n */\nexport function getCreateObjectURL(): typeof URL.createObjectURL {\n  if (typeof window === 'undefined') {\n    return noop;\n  }\n\n  const URL = window.URL || window.webkitURL;\n\n  return URL.createObjectURL || noop;\n}\n","import { Options } from '../index.d';\n\nconst IS_PRODUCTION =\n  typeof process !== 'undefined' && process.env?.NODE_ENV === 'production';\n\n/**\n * The global options to apply as fallback to local props.\n */\nexport const DEFAULT_OPTIONS: Options = {\n  hasSourceMap: !IS_PRODUCTION,\n  isMinified: IS_PRODUCTION,\n  isPrefixed: true,\n};\n\nconst globalOptions: Options = Object.assign({}, DEFAULT_OPTIONS);\nconst hasOwnProperty = Object.prototype.hasOwnProperty;\n\n/**\n * Get the option either from props if it exists, or globally.\n */\nexport function getCoalescedOption(\n  props: Record<string, any>,\n  option: keyof Options\n): boolean {\n  const value = props[option];\n\n  return value != null ? !!value : globalOptions[option];\n}\n\nexport function getGlobalOptions(): Options {\n  return globalOptions;\n}\n\nexport function normalizeOptions(options: Partial<Options>): Options {\n  const normalized: Options = Object.assign({}, globalOptions);\n  let option: keyof Options;\n\n  for (option in options) {\n    if (hasOwnProperty.call(normalized, option) && options[option] != null) {\n      normalized[option] = !!options[option];\n    }\n  }\n\n  return normalized;\n}\n\n/**\n * Set the options passed to be global.\n */\nexport function setGlobalOptions(options: Partial<Options>): void {\n  let option: keyof Options;\n\n  for (option in options) {\n    if (hasOwnProperty.call(globalOptions, option)) {\n      globalOptions[option] = !!options[option];\n    }\n  }\n}\n","import { compile, serialize, stringify, middleware, prefixer } from 'stylis';\n\nimport type { Options } from '../index.d';\n\ninterface BeautifyOptions {\n  autosemicolon?: boolean;\n  indent?: string;\n  openbrace?: boolean | string;\n}\n\ninterface BeautifyState {\n  Start: number;\n  AtRule: number;\n  Block: number;\n  Selector: number;\n  Ruleset: number;\n  Property: number;\n  Separator: number;\n  Expression: number;\n  URL: number;\n}\n\n// FIXME: handle Unicode characters\nfunction isName(character: string): boolean {\n  return (\n    (character >= 'a' && character <= 'z') ||\n    (character >= 'A' && character <= 'Z') ||\n    (character >= '0' && character <= '9') ||\n    '-_*.:#[]'.indexOf(character) >= 0\n  );\n}\n\nfunction isQuote(char: string | null | undefined): boolean {\n  return char === \"'\" || char === '\"';\n}\n\nfunction isWhitespace(char: string): boolean {\n  return (\n    char === ' ' ||\n    char === '\\n' ||\n    char === '\\t' ||\n    char === '\\r' ||\n    char === '\\f'\n  );\n}\n\nexport function beautify(style: string, options: BeautifyOptions = {}): string {\n  // We want to deal with LF (\\n) only\n  style = style.replace(/\\r\\n/g, '\\n');\n\n  const {\n    autosemicolon = false,\n    indent = '  ',\n    openbrace: openbracesuffix = true,\n  } = options;\n\n  let index = 0;\n  const length = style.length;\n  const blocks: string[] = [];\n  let formatted = '';\n  let character: string;\n  let character2: string;\n  let string: string;\n  const State: BeautifyState = {\n    Start: 0,\n    AtRule: 1,\n    Block: 2,\n    Selector: 3,\n    Ruleset: 4,\n    Property: 5,\n    Separator: 6,\n    Expression: 7,\n    URL: 8,\n  };\n  let state = State.Start;\n  let depth = 0;\n  let quote;\n  let comment = false;\n\n  function appendIndent() {\n    for (let index = depth; index > 0; --index) {\n      formatted += indent;\n    }\n  }\n\n  function openBlock() {\n    formatted = formatted.trimEnd();\n\n    if (openbracesuffix) {\n      formatted += ' {';\n    } else {\n      formatted += '\\n';\n      appendIndent();\n      formatted += '{';\n    }\n\n    if (character2 !== '\\n') {\n      formatted += '\\n';\n    }\n\n    depth += 1;\n  }\n\n  function closeBlock() {\n    let last;\n\n    depth -= 1;\n    formatted = formatted.trimEnd();\n\n    if (formatted.length > 0 && autosemicolon) {\n      last = formatted.charAt(formatted.length - 1);\n\n      if (last !== ';' && last !== '{') {\n        formatted += ';';\n      }\n    }\n\n    formatted += '\\n';\n    appendIndent();\n    formatted += '}';\n    blocks.push(formatted);\n    formatted = '';\n  }\n\n  while (index < length) {\n    character = style.charAt(index);\n    character2 = style.charAt(index + 1);\n    ++index;\n\n    // Inside a string literal?\n    if (isQuote(quote)) {\n      formatted += character;\n\n      if (character === quote) {\n        quote = null;\n      }\n\n      if (character === '\\\\' && character2 === quote) {\n        // Don't treat escaped character as the closing quote\n        formatted += character2;\n        ++index;\n      }\n\n      continue;\n    }\n\n    // Starting a string literal?\n    if (isQuote(character)) {\n      formatted += character;\n      quote = character;\n\n      continue;\n    }\n\n    // Comment\n    if (comment) {\n      formatted += character;\n\n      if (character === '*' && character2 === '/') {\n        comment = false;\n        formatted += character2;\n        ++index;\n      }\n\n      continue;\n    }\n    if (character === '/' && character2 === '*') {\n      comment = true;\n      formatted += character;\n      formatted += character2;\n      ++index;\n\n      continue;\n    }\n\n    if (state === State.Start) {\n      if (\n        blocks.length === 0 &&\n        isWhitespace(character) &&\n        formatted.length === 0\n      ) {\n        continue;\n      }\n\n      // Copy white spaces and control characters\n      if (character <= ' ' || character.charCodeAt(0) >= 128) {\n        state = State.Start;\n        formatted += character;\n\n        continue;\n      }\n\n      // Selector or at-rule\n      if (isName(character) || character === '@') {\n        // Clear trailing whitespaces and linefeeds.\n        string = formatted.trimEnd();\n\n        if (string.length === 0) {\n          // If we have empty string after removing all the trailing\n          // spaces, that means we are right after a block.\n          // Ensure a blank line as the separator.\n          if (blocks.length > 0) {\n            formatted = '\\n\\n';\n          }\n        } else {\n          const lastChar = string.charAt(string.length - 1);\n\n          // After finishing a ruleset or directive statement,\n          // there should be one blank line.\n          if (lastChar === '}' || lastChar === ';') {\n            formatted = string + '\\n\\n';\n          } else {\n            // After block comment, keep all the linefeeds but\n            // start from the first column (remove whitespaces prefix).\n            // eslint-disable-next-line no-constant-condition\n            while (true) {\n              character2 = formatted.charAt(formatted.length - 1);\n\n              if (character2 !== ' ' && character2.charCodeAt(0) !== 9) {\n                break;\n              }\n\n              formatted = formatted.substr(0, formatted.length - 1);\n            }\n          }\n        }\n\n        formatted += character;\n        state = character === '@' ? State.AtRule : State.Selector;\n\n        continue;\n      }\n    }\n\n    if (state === State.AtRule) {\n      // ';' terminates a statement.\n      if (character === ';') {\n        formatted += character;\n        state = State.Start;\n\n        continue;\n      }\n\n      // '{' starts a block\n      if (character === '{') {\n        string = formatted.trimEnd();\n        openBlock();\n        state = string === '@font-face' ? State.Ruleset : State.Block;\n\n        continue;\n      }\n\n      formatted += character;\n\n      continue;\n    }\n\n    if (state === State.Block) {\n      // Selector\n      if (isName(character)) {\n        // Clear trailing whitespaces and linefeeds.\n        string = formatted.trimEnd();\n\n        if (string.length === 0) {\n          // If we have empty string after removing all the trailing\n          // spaces, that means we are right after a block.\n          // Ensure a blank line as the separator.\n          if (blocks.length > 0) {\n            formatted = '\\n\\n';\n          }\n        } else {\n          // Insert blank line if necessary.\n          if (string.charAt(string.length - 1) === '}') {\n            formatted = string + '\\n\\n';\n          } else {\n            // After block comment, keep all the linefeeds but\n            // start from the first column (remove whitespaces prefix).\n            // eslint-disable-next-line no-constant-condition\n            while (true) {\n              character2 = formatted.charAt(formatted.length - 1);\n\n              if (character2 !== ' ' && character2.charCodeAt(0) !== 9) {\n                break;\n              }\n\n              formatted = formatted.substr(0, formatted.length - 1);\n            }\n          }\n        }\n\n        appendIndent();\n        formatted += character;\n        state = State.Selector;\n\n        continue;\n      }\n\n      // '}' resets the state.\n      if (character === '}') {\n        closeBlock();\n        state = State.Start;\n\n        continue;\n      }\n\n      formatted += character;\n\n      continue;\n    }\n\n    if (state === State.Selector) {\n      // '{' starts the ruleset.\n      if (character === '{') {\n        openBlock();\n        state = State.Ruleset;\n\n        continue;\n      }\n\n      // '}' resets the state.\n      if (character === '}') {\n        closeBlock();\n        state = State.Start;\n\n        continue;\n      }\n\n      formatted += character;\n\n      continue;\n    }\n\n    if (state === State.Ruleset) {\n      // '}' finishes the ruleset.\n      if (character === '}') {\n        closeBlock();\n        state = State.Start;\n\n        if (depth > 0) {\n          state = State.Block;\n        }\n\n        continue;\n      }\n\n      // Make sure there is no blank line or trailing spaces inbetween\n      if (character === '\\n') {\n        formatted = formatted.trimEnd();\n        formatted += '\\n';\n\n        continue;\n      }\n\n      // property name\n      if (!isWhitespace(character)) {\n        formatted = formatted.trimEnd();\n        formatted += '\\n';\n        appendIndent();\n        formatted += character;\n        state = State.Property;\n\n        continue;\n      }\n\n      formatted += character;\n\n      continue;\n    }\n\n    if (state === State.Property) {\n      // ':' concludes the property.\n      if (character === ':') {\n        formatted = formatted.trimEnd();\n        formatted += ': ';\n        state = State.Expression;\n\n        if (isWhitespace(character2)) {\n          state = State.Separator;\n        }\n\n        continue;\n      }\n\n      // '}' finishes the ruleset.\n      if (character === '}') {\n        closeBlock();\n        state = State.Start;\n\n        if (depth > 0) {\n          state = State.Block;\n        }\n\n        continue;\n      }\n\n      formatted += character;\n\n      continue;\n    }\n\n    if (state === State.Separator) {\n      // Non-whitespace starts the expression.\n      if (!isWhitespace(character)) {\n        formatted += character;\n        state = State.Expression;\n\n        continue;\n      }\n\n      // Anticipate string literal.\n      if (isQuote(character2)) {\n        state = State.Expression;\n      }\n\n      continue;\n    }\n\n    if (state === State.Expression) {\n      // '}' finishes the ruleset.\n      if (character === '}') {\n        closeBlock();\n        state = State.Start;\n\n        if (depth > 0) {\n          state = State.Block;\n        }\n\n        continue;\n      }\n\n      // ';' completes the declaration.\n      if (character === ';') {\n        formatted = formatted.trimEnd();\n        formatted += ';\\n';\n        state = State.Ruleset;\n\n        continue;\n      }\n\n      formatted += character;\n\n      if (\n        character === '(' &&\n        formatted.charAt(formatted.length - 2) === 'l' &&\n        formatted.charAt(formatted.length - 3) === 'r' &&\n        formatted.charAt(formatted.length - 4) === 'u'\n      ) {\n        // URL starts with '(' and closes with ')'.\n        state = State.URL;\n\n        continue;\n      }\n\n      continue;\n    }\n\n    if (\n      state === State.URL &&\n      // ')' finishes the URL (only if it is not escaped).\n      character === ')' &&\n      formatted.charAt(\n        // @ts-expect-error - testing multiline\n        formatted.length - 1 !== '\\\\' ? 1 : 0\n      )\n    ) {\n      formatted += character;\n      state = State.Expression;\n\n      continue;\n    }\n\n    // The default action is to copy the character (to prevent\n    // infinite loop).\n    formatted += character;\n  }\n\n  formatted = blocks.join('') + formatted;\n\n  return formatted;\n}\n\n/**\n * Get the styles processed for passing through to the element.\n */\nexport function getProcessedStyles(style: string, options: Options): string {\n  const compiled = compile(style);\n  const enhancer = options.isPrefixed\n    ? middleware([prefixer, stringify])\n    : stringify;\n\n  return serialize(compiled, enhancer);\n}\n\n/**\n * Get the styles rendered in the HTML tag.\n */\nexport function getRenderedStyles(style: string, options: Options): string {\n  const processed = getProcessedStyles(style, options);\n\n  return options.isMinified\n    ? processed\n    : /*#__NOINLINE__*/\n      beautify(processed, { autosemicolon: true, indent: '  ' });\n}\n","import { createElement, forwardRef, useMemo, useRef } from 'react';\nimport { createPortal } from 'react-dom';\nimport { createGetCachedLinkHref } from './blob';\nimport { normalizeOptions } from './options';\nimport { getRenderedStyles } from './styles';\n\nimport type { ComponentType, MutableRefObject } from 'react';\nimport type { Options, Props } from '../index.d';\n\ninterface TagProps\n  extends Omit<\n    Props,\n    'children' | 'hasSourceMap' | 'isMinified' | 'isPrefixed'\n  > {}\n\nconst INTERNAL_PROPS: Record<string, true> = {\n  children: true,\n  hasSourceMap: true,\n  isMinified: true,\n  isPrefixed: true,\n};\n\n/**\n * Extract the props used for deriving processed style for passing through to the\n * underlying HTML element.\n */\nfunction useTagProps(props: Props): TagProps {\n  const remainingProps: TagProps = {};\n\n  for (const key in props) {\n    if (!INTERNAL_PROPS[key]) {\n      remainingProps[key] = props[key];\n    }\n  }\n\n  return remainingProps;\n}\n\n/**\n * Calculate and store the style in a local reference.\n */\nfunction useStyle(children: string, options: Options) {\n  const childrenRef = useRef<string>(children);\n  const styleRef = useRef<string>();\n\n  if (!styleRef.current || childrenRef.current !== children) {\n    styleRef.current = getRenderedStyles(children, options);\n    childrenRef.current = children;\n  }\n\n  return styleRef.current;\n}\n\nconst Link = forwardRef<\n  HTMLLinkElement,\n  { passedProps: TagProps; style: string }\n>(function LinkTag({ passedProps, style }, ref) {\n  const getCachedLinkHref = useMemo(createGetCachedLinkHref, []);\n\n  return createElement(\n    'link',\n    Object.assign({}, passedProps, {\n      href: getCachedLinkHref(style),\n      rel: 'stylesheet',\n      ref,\n    })\n  );\n});\n\nexport const Style = forwardRef<HTMLLinkElement | HTMLStyleElement, Props>(\n  function Style(props, ref) {\n    const { hasSourceMap, isMinified, isPrefixed } = props;\n\n    const passedProps = /*#__NOINLINE__*/ useTagProps(props);\n    const options = useMemo(\n      () => normalizeOptions({ hasSourceMap, isMinified, isPrefixed }),\n      [hasSourceMap, isMinified, isPrefixed]\n    );\n    const style = /*#__NOINLINE__*/ useStyle(props.children, options);\n\n    if (options.hasSourceMap) {\n      return createPortal(\n        createElement(Link, {\n          passedProps,\n          ref: ref as MutableRefObject<HTMLLinkElement>,\n          style,\n        }),\n        document.head\n      );\n    }\n\n    return createPortal(\n      createElement('style', Object.assign({}, passedProps, { ref }), style),\n      document.head\n    );\n  }\n) as ComponentType<Props>;\n","let counter = 0;\n\n/**\n * Simple bitwise hash of string value.\n */\nexport function hash<Key extends string>(\n  key: Key\n): `scoped__${Key}__${number}` {\n  const stringToHash = `${key}-${counter++}`;\n\n  let hashValue = 5381;\n  let index = stringToHash.length;\n\n  while (index) {\n    hashValue = (hashValue * 33) ^ stringToHash.charCodeAt(--index);\n  }\n\n  return `scoped__${key}__${hashValue >>> 0}`;\n}\n\n/**\n * Create a hash map based on the keys passed.\n */\nexport function hashKeys<Keys extends readonly string[]>(\n  keys: Keys\n): { [Key in Keys[number]]: `scoped__${Key}__${number}` } {\n  return keys.reduce((hashMap, key: Keys[number]) => {\n    hashMap[key] = hash(key);\n\n    return hashMap;\n  }, {} as { [Key in Keys[number]]: `scoped__${Key}__${number}` });\n}\n"],"names":["noop","noopCreateObjectUrl","createGetCachedLinkHref","href","createObjectURL","getCreateObjectURL","currentStyle","getCachedLinkedHref","style","Blob","type","undefined","window","URL","webkitURL","IS_PRODUCTION","process","env","NODE_ENV","DEFAULT_OPTIONS","hasSourceMap","isMinified","isPrefixed","globalOptions","Object","assign","hasOwnProperty","prototype","getGlobalOptions","normalizeOptions","options","normalized","option","call","setGlobalOptions","isName","character","indexOf","isQuote","char","isWhitespace","beautify","replace","autosemicolon","indent","openbrace","openbracesuffix","index","length","blocks","formatted","character2","string","State","Start","AtRule","Block","Selector","Ruleset","Property","Separator","Expression","state","depth","quote","comment","appendIndent","openBlock","trimEnd","closeBlock","last","charAt","push","charCodeAt","lastChar","substr","join","getProcessedStyles","compiled","compile","enhancer","middleware","prefixer","stringify","serialize","getRenderedStyles","processed","INTERNAL_PROPS","children","useTagProps","props","remainingProps","key","useStyle","childrenRef","useRef","styleRef","current","Link","forwardRef","LinkTag","ref","passedProps","getCachedLinkHref","useMemo","createElement","rel","Style","createPortal","document","head","counter","hash","stringToHash","hashValue","hashKeys","keys","reduce","hashMap"],"mappings":"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"}