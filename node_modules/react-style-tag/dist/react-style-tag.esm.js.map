{"version":3,"file":"react-style-tag.esm.js","sources":["../src/blob.ts","../src/options.ts","../src/styles.ts","../src/Style.tsx","../src/hash.ts"],"sourcesContent":["const noop = function noopCreateObjectUrl(): undefined {\n  return;\n} as unknown as typeof URL.createObjectURL;\n\n/**\n * Create a cached version of the getLinkHref.\n */\nexport function createGetCachedLinkHref(): (\n  style: string\n) => string | undefined {\n  let href: string | undefined;\n  let createObjectURL: ReturnType<typeof getCreateObjectURL> =\n    getCreateObjectURL();\n  let currentStyle: string | null = null;\n\n  return function getCachedLinkedHref(style: string): string | undefined {\n    if (style === currentStyle) {\n      return href;\n    }\n\n    if (createObjectURL === noop) {\n      createObjectURL = getCreateObjectURL();\n    }\n\n    if ((currentStyle = style)) {\n      return (href = createObjectURL(new Blob([style], { type: 'text/css' })));\n    }\n\n    return (href = undefined);\n  };\n}\n/**\n * Create the url string based on the available URL. If window is unavailable (such as in SSR),\n * then bail out.\n */\nexport function getCreateObjectURL(): typeof URL.createObjectURL {\n  if (typeof window === 'undefined') {\n    return noop;\n  }\n\n  const URL = window.URL || window.webkitURL;\n\n  return URL.createObjectURL || noop;\n}\n","import { Options } from '../index.d';\n\nconst IS_PRODUCTION =\n  typeof process !== 'undefined' && process.env?.NODE_ENV === 'production';\n\n/**\n * The global options to apply as fallback to local props.\n */\nexport const DEFAULT_OPTIONS: Options = {\n  hasSourceMap: !IS_PRODUCTION,\n  isMinified: IS_PRODUCTION,\n  isPrefixed: true,\n};\n\nconst globalOptions: Options = Object.assign({}, DEFAULT_OPTIONS);\nconst hasOwnProperty = Object.prototype.hasOwnProperty;\n\n/**\n * Get the option either from props if it exists, or globally.\n */\nexport function getCoalescedOption(\n  props: Record<string, any>,\n  option: keyof Options\n): boolean {\n  const value = props[option];\n\n  return value != null ? !!value : globalOptions[option];\n}\n\nexport function getGlobalOptions(): Options {\n  return globalOptions;\n}\n\nexport function normalizeOptions(options: Partial<Options>): Options {\n  const normalized: Options = Object.assign({}, globalOptions);\n  let option: keyof Options;\n\n  for (option in options) {\n    if (hasOwnProperty.call(normalized, option) && options[option] != null) {\n      normalized[option] = !!options[option];\n    }\n  }\n\n  return normalized;\n}\n\n/**\n * Set the options passed to be global.\n */\nexport function setGlobalOptions(options: Partial<Options>): void {\n  let option: keyof Options;\n\n  for (option in options) {\n    if (hasOwnProperty.call(globalOptions, option)) {\n      globalOptions[option] = !!options[option];\n    }\n  }\n}\n","import { compile, serialize, stringify, middleware, prefixer } from 'stylis';\n\nimport type { Options } from '../index.d';\n\ninterface BeautifyOptions {\n  autosemicolon?: boolean;\n  indent?: string;\n  openbrace?: boolean | string;\n}\n\ninterface BeautifyState {\n  Start: number;\n  AtRule: number;\n  Block: number;\n  Selector: number;\n  Ruleset: number;\n  Property: number;\n  Separator: number;\n  Expression: number;\n  URL: number;\n}\n\n// FIXME: handle Unicode characters\nfunction isName(character: string): boolean {\n  return (\n    (character >= 'a' && character <= 'z') ||\n    (character >= 'A' && character <= 'Z') ||\n    (character >= '0' && character <= '9') ||\n    '-_*.:#[]'.indexOf(character) >= 0\n  );\n}\n\nfunction isQuote(char: string | null | undefined): boolean {\n  return char === \"'\" || char === '\"';\n}\n\nfunction isWhitespace(char: string): boolean {\n  return (\n    char === ' ' ||\n    char === '\\n' ||\n    char === '\\t' ||\n    char === '\\r' ||\n    char === '\\f'\n  );\n}\n\nexport function beautify(style: string, options: BeautifyOptions = {}): string {\n  // We want to deal with LF (\\n) only\n  style = style.replace(/\\r\\n/g, '\\n');\n\n  const {\n    autosemicolon = false,\n    indent = '  ',\n    openbrace: openbracesuffix = true,\n  } = options;\n\n  let index = 0;\n  const length = style.length;\n  const blocks: string[] = [];\n  let formatted = '';\n  let character: string;\n  let character2: string;\n  let string: string;\n  const State: BeautifyState = {\n    Start: 0,\n    AtRule: 1,\n    Block: 2,\n    Selector: 3,\n    Ruleset: 4,\n    Property: 5,\n    Separator: 6,\n    Expression: 7,\n    URL: 8,\n  };\n  let state = State.Start;\n  let depth = 0;\n  let quote;\n  let comment = false;\n\n  function appendIndent() {\n    for (let index = depth; index > 0; --index) {\n      formatted += indent;\n    }\n  }\n\n  function openBlock() {\n    formatted = formatted.trimEnd();\n\n    if (openbracesuffix) {\n      formatted += ' {';\n    } else {\n      formatted += '\\n';\n      appendIndent();\n      formatted += '{';\n    }\n\n    if (character2 !== '\\n') {\n      formatted += '\\n';\n    }\n\n    depth += 1;\n  }\n\n  function closeBlock() {\n    let last;\n\n    depth -= 1;\n    formatted = formatted.trimEnd();\n\n    if (formatted.length > 0 && autosemicolon) {\n      last = formatted.charAt(formatted.length - 1);\n\n      if (last !== ';' && last !== '{') {\n        formatted += ';';\n      }\n    }\n\n    formatted += '\\n';\n    appendIndent();\n    formatted += '}';\n    blocks.push(formatted);\n    formatted = '';\n  }\n\n  while (index < length) {\n    character = style.charAt(index);\n    character2 = style.charAt(index + 1);\n    ++index;\n\n    // Inside a string literal?\n    if (isQuote(quote)) {\n      formatted += character;\n\n      if (character === quote) {\n        quote = null;\n      }\n\n      if (character === '\\\\' && character2 === quote) {\n        // Don't treat escaped character as the closing quote\n        formatted += character2;\n        ++index;\n      }\n\n      continue;\n    }\n\n    // Starting a string literal?\n    if (isQuote(character)) {\n      formatted += character;\n      quote = character;\n\n      continue;\n    }\n\n    // Comment\n    if (comment) {\n      formatted += character;\n\n      if (character === '*' && character2 === '/') {\n        comment = false;\n        formatted += character2;\n        ++index;\n      }\n\n      continue;\n    }\n    if (character === '/' && character2 === '*') {\n      comment = true;\n      formatted += character;\n      formatted += character2;\n      ++index;\n\n      continue;\n    }\n\n    if (state === State.Start) {\n      if (\n        blocks.length === 0 &&\n        isWhitespace(character) &&\n        formatted.length === 0\n      ) {\n        continue;\n      }\n\n      // Copy white spaces and control characters\n      if (character <= ' ' || character.charCodeAt(0) >= 128) {\n        state = State.Start;\n        formatted += character;\n\n        continue;\n      }\n\n      // Selector or at-rule\n      if (isName(character) || character === '@') {\n        // Clear trailing whitespaces and linefeeds.\n        string = formatted.trimEnd();\n\n        if (string.length === 0) {\n          // If we have empty string after removing all the trailing\n          // spaces, that means we are right after a block.\n          // Ensure a blank line as the separator.\n          if (blocks.length > 0) {\n            formatted = '\\n\\n';\n          }\n        } else {\n          const lastChar = string.charAt(string.length - 1);\n\n          // After finishing a ruleset or directive statement,\n          // there should be one blank line.\n          if (lastChar === '}' || lastChar === ';') {\n            formatted = string + '\\n\\n';\n          } else {\n            // After block comment, keep all the linefeeds but\n            // start from the first column (remove whitespaces prefix).\n            // eslint-disable-next-line no-constant-condition\n            while (true) {\n              character2 = formatted.charAt(formatted.length - 1);\n\n              if (character2 !== ' ' && character2.charCodeAt(0) !== 9) {\n                break;\n              }\n\n              formatted = formatted.substr(0, formatted.length - 1);\n            }\n          }\n        }\n\n        formatted += character;\n        state = character === '@' ? State.AtRule : State.Selector;\n\n        continue;\n      }\n    }\n\n    if (state === State.AtRule) {\n      // ';' terminates a statement.\n      if (character === ';') {\n        formatted += character;\n        state = State.Start;\n\n        continue;\n      }\n\n      // '{' starts a block\n      if (character === '{') {\n        string = formatted.trimEnd();\n        openBlock();\n        state = string === '@font-face' ? State.Ruleset : State.Block;\n\n        continue;\n      }\n\n      formatted += character;\n\n      continue;\n    }\n\n    if (state === State.Block) {\n      // Selector\n      if (isName(character)) {\n        // Clear trailing whitespaces and linefeeds.\n        string = formatted.trimEnd();\n\n        if (string.length === 0) {\n          // If we have empty string after removing all the trailing\n          // spaces, that means we are right after a block.\n          // Ensure a blank line as the separator.\n          if (blocks.length > 0) {\n            formatted = '\\n\\n';\n          }\n        } else {\n          // Insert blank line if necessary.\n          if (string.charAt(string.length - 1) === '}') {\n            formatted = string + '\\n\\n';\n          } else {\n            // After block comment, keep all the linefeeds but\n            // start from the first column (remove whitespaces prefix).\n            // eslint-disable-next-line no-constant-condition\n            while (true) {\n              character2 = formatted.charAt(formatted.length - 1);\n\n              if (character2 !== ' ' && character2.charCodeAt(0) !== 9) {\n                break;\n              }\n\n              formatted = formatted.substr(0, formatted.length - 1);\n            }\n          }\n        }\n\n        appendIndent();\n        formatted += character;\n        state = State.Selector;\n\n        continue;\n      }\n\n      // '}' resets the state.\n      if (character === '}') {\n        closeBlock();\n        state = State.Start;\n\n        continue;\n      }\n\n      formatted += character;\n\n      continue;\n    }\n\n    if (state === State.Selector) {\n      // '{' starts the ruleset.\n      if (character === '{') {\n        openBlock();\n        state = State.Ruleset;\n\n        continue;\n      }\n\n      // '}' resets the state.\n      if (character === '}') {\n        closeBlock();\n        state = State.Start;\n\n        continue;\n      }\n\n      formatted += character;\n\n      continue;\n    }\n\n    if (state === State.Ruleset) {\n      // '}' finishes the ruleset.\n      if (character === '}') {\n        closeBlock();\n        state = State.Start;\n\n        if (depth > 0) {\n          state = State.Block;\n        }\n\n        continue;\n      }\n\n      // Make sure there is no blank line or trailing spaces inbetween\n      if (character === '\\n') {\n        formatted = formatted.trimEnd();\n        formatted += '\\n';\n\n        continue;\n      }\n\n      // property name\n      if (!isWhitespace(character)) {\n        formatted = formatted.trimEnd();\n        formatted += '\\n';\n        appendIndent();\n        formatted += character;\n        state = State.Property;\n\n        continue;\n      }\n\n      formatted += character;\n\n      continue;\n    }\n\n    if (state === State.Property) {\n      // ':' concludes the property.\n      if (character === ':') {\n        formatted = formatted.trimEnd();\n        formatted += ': ';\n        state = State.Expression;\n\n        if (isWhitespace(character2)) {\n          state = State.Separator;\n        }\n\n        continue;\n      }\n\n      // '}' finishes the ruleset.\n      if (character === '}') {\n        closeBlock();\n        state = State.Start;\n\n        if (depth > 0) {\n          state = State.Block;\n        }\n\n        continue;\n      }\n\n      formatted += character;\n\n      continue;\n    }\n\n    if (state === State.Separator) {\n      // Non-whitespace starts the expression.\n      if (!isWhitespace(character)) {\n        formatted += character;\n        state = State.Expression;\n\n        continue;\n      }\n\n      // Anticipate string literal.\n      if (isQuote(character2)) {\n        state = State.Expression;\n      }\n\n      continue;\n    }\n\n    if (state === State.Expression) {\n      // '}' finishes the ruleset.\n      if (character === '}') {\n        closeBlock();\n        state = State.Start;\n\n        if (depth > 0) {\n          state = State.Block;\n        }\n\n        continue;\n      }\n\n      // ';' completes the declaration.\n      if (character === ';') {\n        formatted = formatted.trimEnd();\n        formatted += ';\\n';\n        state = State.Ruleset;\n\n        continue;\n      }\n\n      formatted += character;\n\n      if (\n        character === '(' &&\n        formatted.charAt(formatted.length - 2) === 'l' &&\n        formatted.charAt(formatted.length - 3) === 'r' &&\n        formatted.charAt(formatted.length - 4) === 'u'\n      ) {\n        // URL starts with '(' and closes with ')'.\n        state = State.URL;\n\n        continue;\n      }\n\n      continue;\n    }\n\n    if (\n      state === State.URL &&\n      // ')' finishes the URL (only if it is not escaped).\n      character === ')' &&\n      formatted.charAt(\n        // @ts-expect-error - testing multiline\n        formatted.length - 1 !== '\\\\' ? 1 : 0\n      )\n    ) {\n      formatted += character;\n      state = State.Expression;\n\n      continue;\n    }\n\n    // The default action is to copy the character (to prevent\n    // infinite loop).\n    formatted += character;\n  }\n\n  formatted = blocks.join('') + formatted;\n\n  return formatted;\n}\n\n/**\n * Get the styles processed for passing through to the element.\n */\nexport function getProcessedStyles(style: string, options: Options): string {\n  const compiled = compile(style);\n  const enhancer = options.isPrefixed\n    ? middleware([prefixer, stringify])\n    : stringify;\n\n  return serialize(compiled, enhancer);\n}\n\n/**\n * Get the styles rendered in the HTML tag.\n */\nexport function getRenderedStyles(style: string, options: Options): string {\n  const processed = getProcessedStyles(style, options);\n\n  return options.isMinified\n    ? processed\n    : /*#__NOINLINE__*/\n      beautify(processed, { autosemicolon: true, indent: '  ' });\n}\n","import { createElement, forwardRef, useMemo, useRef } from 'react';\nimport { createPortal } from 'react-dom';\nimport { createGetCachedLinkHref } from './blob';\nimport { normalizeOptions } from './options';\nimport { getRenderedStyles } from './styles';\n\nimport type { ComponentType, MutableRefObject } from 'react';\nimport type { Options, Props } from '../index.d';\n\ninterface TagProps\n  extends Omit<\n    Props,\n    'children' | 'hasSourceMap' | 'isMinified' | 'isPrefixed'\n  > {}\n\nconst INTERNAL_PROPS: Record<string, true> = {\n  children: true,\n  hasSourceMap: true,\n  isMinified: true,\n  isPrefixed: true,\n};\n\n/**\n * Extract the props used for deriving processed style for passing through to the\n * underlying HTML element.\n */\nfunction useTagProps(props: Props): TagProps {\n  const remainingProps: TagProps = {};\n\n  for (const key in props) {\n    if (!INTERNAL_PROPS[key]) {\n      remainingProps[key] = props[key];\n    }\n  }\n\n  return remainingProps;\n}\n\n/**\n * Calculate and store the style in a local reference.\n */\nfunction useStyle(children: string, options: Options) {\n  const childrenRef = useRef<string>(children);\n  const styleRef = useRef<string>();\n\n  if (!styleRef.current || childrenRef.current !== children) {\n    styleRef.current = getRenderedStyles(children, options);\n    childrenRef.current = children;\n  }\n\n  return styleRef.current;\n}\n\nconst Link = forwardRef<\n  HTMLLinkElement,\n  { passedProps: TagProps; style: string }\n>(function LinkTag({ passedProps, style }, ref) {\n  const getCachedLinkHref = useMemo(createGetCachedLinkHref, []);\n\n  return createElement(\n    'link',\n    Object.assign({}, passedProps, {\n      href: getCachedLinkHref(style),\n      rel: 'stylesheet',\n      ref,\n    })\n  );\n});\n\nexport const Style = forwardRef<HTMLLinkElement | HTMLStyleElement, Props>(\n  function Style(props, ref) {\n    const { hasSourceMap, isMinified, isPrefixed } = props;\n\n    const passedProps = /*#__NOINLINE__*/ useTagProps(props);\n    const options = useMemo(\n      () => normalizeOptions({ hasSourceMap, isMinified, isPrefixed }),\n      [hasSourceMap, isMinified, isPrefixed]\n    );\n    const style = /*#__NOINLINE__*/ useStyle(props.children, options);\n\n    if (options.hasSourceMap) {\n      return createPortal(\n        createElement(Link, {\n          passedProps,\n          ref: ref as MutableRefObject<HTMLLinkElement>,\n          style,\n        }),\n        document.head\n      );\n    }\n\n    return createPortal(\n      createElement('style', Object.assign({}, passedProps, { ref }), style),\n      document.head\n    );\n  }\n) as ComponentType<Props>;\n","let counter = 0;\n\n/**\n * Simple bitwise hash of string value.\n */\nexport function hash<Key extends string>(\n  key: Key\n): `scoped__${Key}__${number}` {\n  const stringToHash = `${key}-${counter++}`;\n\n  let hashValue = 5381;\n  let index = stringToHash.length;\n\n  while (index) {\n    hashValue = (hashValue * 33) ^ stringToHash.charCodeAt(--index);\n  }\n\n  return `scoped__${key}__${hashValue >>> 0}`;\n}\n\n/**\n * Create a hash map based on the keys passed.\n */\nexport function hashKeys<Keys extends readonly string[]>(\n  keys: Keys\n): { [Key in Keys[number]]: `scoped__${Key}__${number}` } {\n  return keys.reduce((hashMap, key: Keys[number]) => {\n    hashMap[key] = hash(key);\n\n    return hashMap;\n  }, {} as { [Key in Keys[number]]: `scoped__${Key}__${number}` });\n}\n"],"names":["noop","noopCreateObjectUrl","createGetCachedLinkHref","href","createObjectURL","getCreateObjectURL","currentStyle","getCachedLinkedHref","style","Blob","type","undefined","window","URL","webkitURL","IS_PRODUCTION","process","env","NODE_ENV","DEFAULT_OPTIONS","hasSourceMap","isMinified","isPrefixed","globalOptions","Object","assign","hasOwnProperty","prototype","getGlobalOptions","normalizeOptions","options","normalized","option","call","setGlobalOptions","isName","character","indexOf","isQuote","char","isWhitespace","beautify","replace","autosemicolon","indent","openbrace","openbracesuffix","index","length","blocks","formatted","character2","string","State","Start","AtRule","Block","Selector","Ruleset","Property","Separator","Expression","state","depth","quote","comment","appendIndent","openBlock","trimEnd","closeBlock","last","charAt","push","charCodeAt","lastChar","substr","join","getProcessedStyles","compiled","compile","enhancer","middleware","prefixer","stringify","serialize","getRenderedStyles","processed","INTERNAL_PROPS","children","useTagProps","props","remainingProps","key","useStyle","childrenRef","useRef","styleRef","current","Link","forwardRef","LinkTag","ref","passedProps","getCachedLinkHref","useMemo","createElement","rel","Style","createPortal","document","head","counter","hash","stringToHash","hashValue","hashKeys","keys","reduce","hashMap"],"mappings":"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"}